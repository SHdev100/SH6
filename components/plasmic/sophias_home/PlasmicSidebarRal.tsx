/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kAhnrc4yp7SieEoMyjLDJq
// Component: XFZUMDvK7XzJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: kAhnrc4yp7SieEoMyjLDJq/projectcss
import sty from "./PlasmicSidebarRal.module.css"; // plasmic-import: XFZUMDvK7XzJ/css

createPlasmicElementProxy;

export type PlasmicSidebarRal__VariantMembers = {};
export type PlasmicSidebarRal__VariantsArgs = {};
type VariantPropType = keyof PlasmicSidebarRal__VariantsArgs;
export const PlasmicSidebarRal__VariantProps = new Array<VariantPropType>();

export type PlasmicSidebarRal__ArgsType = {};
type ArgPropType = keyof PlasmicSidebarRal__ArgsType;
export const PlasmicSidebarRal__ArgProps = new Array<ArgPropType>();

export type PlasmicSidebarRal__OverridesType = {
  root?: Flex__<typeof RichLayout>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultSidebarRalProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSidebarRal__RenderFunc(props: {
  variants: PlasmicSidebarRal__VariantsArgs;
  args: PlasmicSidebarRal__ArgsType;
  overrides: PlasmicSidebarRal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <RichLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      fixSiderbar={false}
      layout={"side"}
      logoElement={
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"15px"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          src={{
            src: "/plasmic/sophias_home/images/absoluteSolverPurpleByAshleyroseeltigresaDgwue0PFullviewPng.png",
            fullWidth: 360,
            fullHeight: 311,
            aspectRatio: undefined
          }}
        />
      }
      menu={(() => {
        const __composite = {
          defaultOpenAll: null,
          hideMenuWhenCollapsed: null
        };
        __composite["defaultOpenAll"] = true;
        __composite["hideMenuWhenCollapsed"] = true;
        return __composite;
      })()}
      navMenuItems={(() => {
        const __composite = [
          { path: null, name: null, routes: null },
          { path: null, name: null }
        ];
        __composite["0"]["path"] = `/home-2`;
        __composite["0"]["name"] = "\ud83c\udfe0 Home";
        __composite["0"]["routes"] = [{}];
        __composite["1"]["path"] = `/games`;
        __composite["1"]["name"] = "Games";
        return __composite;
      })()}
      simpleNavTheme={(() => {
        const __composite = { scheme: null };
        __composite["scheme"] = "dark";
        return __composite;
      })()}
      title={"Sophia's Home 6 (Dev)"}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof RichLayout;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebarRal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebarRal__VariantsArgs;
    args?: PlasmicSidebarRal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebarRal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebarRal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSidebarRal__ArgProps,
          internalVariantPropNames: PlasmicSidebarRal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSidebarRal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebarRal";
  } else {
    func.displayName = `PlasmicSidebarRal.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarRal = Object.assign(
  // Top-level PlasmicSidebarRal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicSidebarRal
    internalVariantProps: PlasmicSidebarRal__VariantProps,
    internalArgProps: PlasmicSidebarRal__ArgProps
  }
);

export default PlasmicSidebarRal;
/* prettier-ignore-end */
