/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kAhnrc4yp7SieEoMyjLDJq
// Component: HMYDcneJWHW2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: kAhnrc4yp7SieEoMyjLDJq/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: HMYDcneJWHW2/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"section">;
  reveal?: Flex__<typeof Reveal>;
  text?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  appsSection?: Flex__<"section">;
  appGrid?: Flex__<"div">;
  column1?: Flex__<"div">;
  column2?: Flex__<"div">;
  column3?: Flex__<"div">;
  column4?: Flex__<"div">;
  column5?: Flex__<"div">;
  column6?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <Reveal
              data-plasmic-name={"reveal"}
              data-plasmic-override={overrides.reveal}
              cascade={true}
              className={classNames("__wab_instance", sty.reveal)}
              damping={-0.1}
              direction={"down"}
              duration={1100}
              effect={"bounce"}
              triggerOnce={true}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Welcome Sophia!"}
              </div>
              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml)}
                code={
                  '<a class="weatherwidget-io" href="https://forecast7.com/en/44d85n93d47/eden-prairie/?unit=us" data-label_1="Eden Prairie" data-label_2="Weather" data-font="Arial Rounded MT Bold" data-icons="Climacons Animated" data-theme="pure" data-basecolor="" data-shadow="rgba(0, 0, 0, 0.38)" data-textcolor="#ffffff" data-highcolor="#f37878" data-lowcolor="#4ea6e5" data-suncolor="#fdc526" data-raincolor="#537aff" data-snowcolor="#5afafa" >EDEN PRAIRIE Weather</a>\n<script>\n!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\'https://weatherwidget.io/js/widget.min.js\';fjs.parentNode.insertBefore(js,fjs);}}(document,\'script\',\'weatherwidget-io-js\');\n</script>'
                }
              />
            </Reveal>
          </section>
          <section
            data-plasmic-name={"appsSection"}
            data-plasmic-override={overrides.appsSection}
            className={classNames(projectcss.all, sty.appsSection)}
          >
            <div
              data-plasmic-name={"appGrid"}
              data-plasmic-override={overrides.appGrid}
              className={classNames(projectcss.all, sty.appGrid)}
            >
              <div
                data-plasmic-name={"column1"}
                data-plasmic-override={overrides.column1}
                className={classNames(projectcss.all, sty.column1)}
              />

              <div
                data-plasmic-name={"column2"}
                data-plasmic-override={overrides.column2}
                className={classNames(projectcss.all, sty.column2)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__qqc9N)}
                  displayHeight={"201px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/sophias_home/images/eSportsGraphicsSquare6Png.png",
                    fullWidth: 960,
                    fullHeight: 960,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div
                data-plasmic-name={"column3"}
                data-plasmic-override={overrides.column3}
                className={classNames(projectcss.all, sty.column3)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__tqDdI)}
                  displayHeight={"201px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/sophias_home/images/_3De91E38Efc64867A2855D7B1A09F896Jpg.jpg",
                    fullWidth: 200,
                    fullHeight: 200,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div
                data-plasmic-name={"column4"}
                data-plasmic-override={overrides.column4}
                className={classNames(projectcss.all, sty.column4)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___7AH95)}
                  displayHeight={"201px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/sophias_home/images/eSportsGraphicsSquare6Png.png",
                    fullWidth: 960,
                    fullHeight: 960,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div
                data-plasmic-name={"column5"}
                data-plasmic-override={overrides.column5}
                className={classNames(projectcss.all, sty.column5)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ln9Qh)}
                  displayHeight={"201px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/sophias_home/images/eSportsGraphicsSquare6Png.png",
                    fullWidth: 960,
                    fullHeight: 960,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div
                data-plasmic-name={"column6"}
                data-plasmic-override={overrides.column6}
                className={classNames(projectcss.all, sty.column6)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uha2L)}
                  displayHeight={"201px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/sophias_home/images/eSportsGraphicsSquare6Png.png",
                    fullWidth: 960,
                    fullHeight: 960,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "reveal",
    "text",
    "embedHtml",
    "appsSection",
    "appGrid",
    "column1",
    "column2",
    "column3",
    "column4",
    "column5",
    "column6"
  ],
  header: ["header", "reveal", "text", "embedHtml"],
  reveal: ["reveal", "text", "embedHtml"],
  text: ["text"],
  embedHtml: ["embedHtml"],
  appsSection: [
    "appsSection",
    "appGrid",
    "column1",
    "column2",
    "column3",
    "column4",
    "column5",
    "column6"
  ],
  appGrid: [
    "appGrid",
    "column1",
    "column2",
    "column3",
    "column4",
    "column5",
    "column6"
  ],
  column1: ["column1"],
  column2: ["column2"],
  column3: ["column3"],
  column4: ["column4"],
  column5: ["column5"],
  column6: ["column6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "section";
  reveal: typeof Reveal;
  text: "div";
  embedHtml: typeof Embed;
  appsSection: "section";
  appGrid: "div";
  column1: "div";
  column2: "div";
  column3: "div";
  column4: "div";
  column5: "div";
  column6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    reveal: makeNodeComponent("reveal"),
    text: makeNodeComponent("text"),
    embedHtml: makeNodeComponent("embedHtml"),
    appsSection: makeNodeComponent("appsSection"),
    appGrid: makeNodeComponent("appGrid"),
    column1: makeNodeComponent("column1"),
    column2: makeNodeComponent("column2"),
    column3: makeNodeComponent("column3"),
    column4: makeNodeComponent("column4"),
    column5: makeNodeComponent("column5"),
    column6: makeNodeComponent("column6"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Sophia's Home 6",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
