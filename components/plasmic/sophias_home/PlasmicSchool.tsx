/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kAhnrc4yp7SieEoMyjLDJq
// Component: -OaT5WQ9Y2O

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Tilt from "@plasmicpkgs/react-parallax-tilt";

import { useScreenVariants as useScreenVariants_13LotfPbLss1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 13Lotf-PbLss1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: kAhnrc4yp7SieEoMyjLDJq/projectcss
import sty from "./PlasmicSchool.module.css"; // plasmic-import: -OaT5WQ9Y2O/css

createPlasmicElementProxy;

export type PlasmicSchool__VariantMembers = {};
export type PlasmicSchool__VariantsArgs = {};
type VariantPropType = keyof PlasmicSchool__VariantsArgs;
export const PlasmicSchool__VariantProps = new Array<VariantPropType>();

export type PlasmicSchool__ArgsType = {};
type ArgPropType = keyof PlasmicSchool__ArgsType;
export const PlasmicSchool__ArgProps = new Array<ArgPropType>();

export type PlasmicSchool__OverridesType = {
  root?: Flex__<"div">;
  title?: Flex__<typeof Reveal>;
  tilt?: Flex__<typeof Tilt>;
  freeBox?: Flex__<"div">;
};

export interface DefaultSchoolProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSchool__RenderFunc(props: {
  variants: PlasmicSchool__VariantsArgs;
  args: PlasmicSchool__ArgsType;
  overrides: PlasmicSchool__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_13LotfPbLss1()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSchool.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSchool.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSchool.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__z1M9B
          )}
        >
          {"Sorry, this website only works on computers."}
        </div>
        <Reveal
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          className={classNames("__wab_instance", sty.title)}
          effect={"bounce"}
          triggerOnce={true}
        >
          <Tilt
            data-plasmic-name={"tilt"}
            data-plasmic-override={overrides.tilt}
            className={classNames("__wab_instance", sty.tilt)}
            glareEnable={false}
            gyroscope={false}
            trackOnWindow={true}
            transitionSpeed={800}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vqd4I
              )}
            >
              {"SCHOOL"}
            </div>
          </Tilt>
        </Reveal>
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__wUuJk)}
            displayHeight={"256px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            onClick={async event => {
              const $steps = {};

              $steps["goToDuckLife"] = true
                ? (() => {
                    const actionArgs = { destination: `/ducklife4` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToDuckLife"] != null &&
                typeof $steps["goToDuckLife"] === "object" &&
                typeof $steps["goToDuckLife"].then === "function"
              ) {
                $steps["goToDuckLife"] = await $steps["goToDuckLife"];
              }
            }}
            src={{
              src: "/plasmic/sophias_home/images/image.png",
              fullWidth: 256,
              fullHeight: 256,
              aspectRatio: undefined
            }}
          />

          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__bg0G)}
            displayHeight={"256px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            onClick={async event => {
              const $steps = {};

              $steps["goToFancyPants"] = true
                ? (() => {
                    const actionArgs = { destination: `/fancypants` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToFancyPants"] != null &&
                typeof $steps["goToFancyPants"] === "object" &&
                typeof $steps["goToFancyPants"].then === "function"
              ) {
                $steps["goToFancyPants"] = await $steps["goToFancyPants"];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {};
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;
                      undefined;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
            src={
              "https://play-lh.googleusercontent.com/uUknF-T1uzoMBLoR7CJo2R6GT_2RYs9qxXSvzCxsxZ-i7KD43k3RsdCyw7xXESIkOUg"
            }
          />

          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__sYob9)}
            displayHeight={"256px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            onClick={async event => {
              const $steps = {};

              $steps["goToLearn2Fly"] = true
                ? (() => {
                    const actionArgs = { destination: `/learn2fly` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToLearn2Fly"] != null &&
                typeof $steps["goToLearn2Fly"] === "object" &&
                typeof $steps["goToLearn2Fly"].then === "function"
              ) {
                $steps["goToLearn2Fly"] = await $steps["goToLearn2Fly"];
              }
            }}
            src={
              "https://images.igdb.com/igdb/image/upload/t_original/qo01vfvc9hsblyzfyovm.jpg"
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "title", "tilt", "freeBox"],
  title: ["title", "tilt"],
  tilt: ["tilt"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  title: typeof Reveal;
  tilt: typeof Tilt;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSchool__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSchool__VariantsArgs;
    args?: PlasmicSchool__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSchool__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSchool__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSchool__ArgProps,
          internalVariantPropNames: PlasmicSchool__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSchool__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSchool";
  } else {
    func.displayName = `PlasmicSchool.${nodeName}`;
  }
  return func;
}

export const PlasmicSchool = Object.assign(
  // Top-level PlasmicSchool renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),
    tilt: makeNodeComponent("tilt"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicSchool
    internalVariantProps: PlasmicSchool__VariantProps,
    internalArgProps: PlasmicSchool__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Games - Sophia's Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSchool;
/* prettier-ignore-end */
